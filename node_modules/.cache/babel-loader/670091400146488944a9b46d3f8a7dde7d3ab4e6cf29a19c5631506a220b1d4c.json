{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clsno\\\\OneDrive\\\\Desktop\\\\Learn React\\\\Flashcards\\\\src\\\\components\\\\AddEditPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// Test\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PageTitle() {\n  return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Add/Edit\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = PageTitle;\nfunction NewDeckArea({\n  onDeckAdd,\n  addDeck\n}) {\n  function handleDeckAdd() {\n    // Get the new deck name\n    const deckName = document.getElementById('new-deck-name');\n    // Add the new deck to the db\n    addDeck(deckName.value);\n    // Reset text input\n    deckName.value = \"\";\n    // Update deck names\n    onDeckAdd();\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-button-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: handleDeckAdd,\n        type: \"button\",\n        className: \"button-style-2\",\n        value: \"Add Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"new-deck-name\",\n      children: \"New Deck Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 66\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      autoComplete: \"off\",\n      id: \"new-deck-name\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 78\n    }, this)]\n  }, void 0, true);\n}\n_c2 = NewDeckArea;\nfunction NewChapterArea({\n  db,\n  deckNames,\n  updateChptState\n}) {\n  _s();\n  const [currentDeck, setCurrentDeck] = useState(\"Deck 0\");\n  const [deckOptions, setDeckOptions] = useState([]);\n  function updateDeckOptions() {\n    // Create a new set of deck options\n    const deckOpts = deckNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this));\n\n    // Update deckOptions state\n    setDeckOptions(deckOpts);\n  }\n  function onDeckSelect(e) {\n    // Update state based off select list\n    const selectedDeck = e.target.options[e.target.selectedIndex].value;\n    setCurrentDeck(selectedDeck);\n  }\n  function addNewChapter() {\n    // Add the new chapter from the input element to the database\n    const newChapterName = document.getElementById('new-chapter-name');\n    // Add the new chapter to the database\n    db.addChapter(currentDeck, newChapterName.value);\n    // Reset input text\n    newChapterName.value = \"\";\n    // Update chapter names state \n    updateChptState(db.getChapterNames(currentDeck));\n  }\n\n  // When deckNames changes, update the deck select options\n  useEffect(() => {\n    updateDeckOptions();\n  }, [deckNames]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"new-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-button-layout more-margin\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chapter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: addNewChapter,\n        type: \"button\",\n        className: \"button-style-2\",\n        value: \"Add Chapter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"deck-select\",\n      children: \"Select Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => onDeckSelect(e),\n      id: \"deck-select-new-chapt\",\n      name: \"deck-select\",\n      children: deckOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"new-chapter-name\",\n      id: \"new-chapt-name\",\n      children: \"New Chapter Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 92\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      autoComplete: \"off\",\n      id: \"new-chapter-name\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 81\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(NewChapterArea, \"ubpNYUpQRvIp57Z/R6iA0GXnCY8=\");\n_c3 = NewChapterArea;\nfunction Content({\n  db\n}) {\n  _s2();\n  const [deckNames, setDeckNames] = useState([]);\n  const [chapterNames, setChapterNames] = useState([]);\n  function addDeck(deckName) {\n    db.addDeck(deckName);\n  }\n  function updateDeckNames() {\n    // pull from database to update deckNames state\n    setDeckNames(db.getDeckNames());\n  }\n\n  // Load deck names on initial load\n  useEffect(() => {\n    updateDeckNames();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-chapt-deck\",\n      children: [/*#__PURE__*/_jsxDEV(NewDeckArea, {\n        onDeckAdd: updateDeckNames,\n        addDeck: addDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(NewChapterArea, {\n        db: db,\n        deckNames: deckNames,\n        updateChptState: setChapterNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AddEditCardArea, {\n      db: db,\n      deckNames: deckNames,\n      chptNamesState: chapterNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 7\n  }, this);\n}\n_s2(Content, \"Xs7odfyshcc3XmCErysOvdboPG4=\");\n_c4 = Content;\nfunction AddEditCardArea({\n  db,\n  deckNames,\n  chptNamesState\n}) {\n  _s3();\n  // Deck/Chapter states\n  const [currentDeck, setCurrentDeck] = useState(\"Deck 0\");\n  const [currentChapter, setCurrentChapter] = useState(\"Chapter 1\");\n  // Select list option states\n  const [deckOptions, setDeckOptions] = useState([]);\n  const [chapterOptions, setChapterOptions] = useState([]);\n  const [cardOptions, setCardOptions] = useState([]);\n  // Card display states\n  const [cardQuestion, setCardQuestion] = useState(\"\");\n  const [cardAnswer, setCardAnswer] = useState(\"\");\n  // UI states (eg toggle button)\n  const [toggleButton, toggle] = useState(false);\n\n  // Helper functions\n  function updateDeckOptions() {\n    // Create a new set of deck options\n    const deckOpts = deckNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this));\n\n    // Update deckOptions state\n    setDeckOptions(deckOpts);\n  }\n  function onDeckSelect(e) {\n    // Update state based off select list\n    const selectedDeck = e.target.options[e.target.selectedIndex].value;\n    setCurrentDeck(selectedDeck);\n  }\n  function onChapterSelect(e) {\n    // Update state based off select list\n    const selectedChpt = e.target.options[e.target.selectedIndex].value;\n    setCurrentChapter(selectedChpt);\n  }\n  function updateChapterOptions() {\n    // Create a new set of chapter options\n    const chapterOpts = db.getChapterNames(currentDeck).map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this));\n\n    // Update chapterOptions state\n    setChapterOptions(chapterOpts);\n  }\n  function updateCardOptions() {\n    // Create a new set of card options\n    const cardOpts = db.getCards(currentDeck, currentChapter).map((card, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: card.id,\n      children: [\"Card \", card.id + 1]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this));\n\n    // Update cardOptions state\n    setCardOptions(cardOpts);\n  }\n  function updateDisplayCard(e = false) {\n    // we could make this function really cool, lots of repeated code\n    if (e) {\n      // Update state based off card select list\n      const selectedCard = e.target.options[e.target.selectedIndex].value;\n      const targetCard = db.getCard(currentDeck, currentChapter, selectedCard);\n      setCardQuestion(targetCard.question);\n      setCardAnswer(targetCard.answer);\n    } else {\n      // Update state based off deck and chapter select list\n      const targetCard = db.getCard(currentDeck, currentChapter, 0); // default Card 0\n      if (targetCard) {\n        // If the card exists, load data\n        setCardQuestion(targetCard.question);\n        setCardAnswer(targetCard.answer);\n      } else {\n        setCardQuestion(\"\");\n        setCardAnswer(\"\");\n      }\n    }\n  }\n\n  // useEffect section\n  useEffect(() => {\n    // When deckNames changes, update the deck select options\n    updateDeckOptions();\n  }, [deckNames]);\n  useEffect(() => {\n    updateChapterOptions();\n  }, [currentDeck, chptNamesState]);\n  useEffect(() => {\n    updateCardOptions();\n  }, [currentDeck, currentChapter]);\n  useEffect(() => {\n    updateDisplayCard();\n  }, [currentDeck, currentChapter]);\n  useEffect(() => {\n    // On initial load, populate card text\n    const targetCard = db.getCard(currentDeck, currentChapter, 0);\n    setCardQuestion(targetCard.question);\n    setCardAnswer(targetCard.answer);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit-add\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-button-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"switch\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"slider round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        className: \"button-style-2\",\n        value: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 92\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"deck-select\",\n        children: \"Select Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => onDeckSelect(e),\n        id: \"deck-select-edit-add\",\n        name: \"deck-select\",\n        className: \"select-style\",\n        children: deckOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"chapter-select\",\n        children: \"Select Chapter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => onChapterSelect(e),\n        id: \"chapter-select\",\n        name: \"chapter-select\",\n        className: \"select-style\",\n        children: chapterOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"card-select\",\n        children: \"Select Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => updateDisplayCard(e),\n        id: \"card-select\",\n        name: \"card-select\",\n        className: \"select-style\",\n        children: cardOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Question:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 37\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: cardQuestion,\n      onChange: e => {\n        setCardQuestion(e.target.value);\n      },\n      autoComplete: \"off\",\n      type: \"text\",\n      id: \"card-question-text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Answer:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: cardAnswer,\n      onChange: e => {\n        setCardAnswer(e.target.value);\n      },\n      id: \"card-answer-text\",\n      name: \"answer\",\n      rows: \"5\",\n      cols: \"40\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 9\n  }, this);\n}\n_s3(AddEditCardArea, \"IyHGAJDUgNkxpPm+A4SGoTZIexQ=\");\n_c5 = AddEditCardArea;\nexport default function AddEdit({\n  db\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      db: db\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c6 = AddEdit;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PageTitle\");\n$RefreshReg$(_c2, \"NewDeckArea\");\n$RefreshReg$(_c3, \"NewChapterArea\");\n$RefreshReg$(_c4, \"Content\");\n$RefreshReg$(_c5, \"AddEditCardArea\");\n$RefreshReg$(_c6, \"AddEdit\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","PageTitle","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","NewDeckArea","onDeckAdd","addDeck","handleDeckAdd","deckName","document","getElementById","value","className","onClick","type","htmlFor","autoComplete","id","_c2","NewChapterArea","db","deckNames","updateChptState","_s","currentDeck","setCurrentDeck","deckOptions","setDeckOptions","updateDeckOptions","deckOpts","map","name","index","onDeckSelect","e","selectedDeck","target","options","selectedIndex","addNewChapter","newChapterName","addChapter","getChapterNames","onChange","_c3","Content","_s2","setDeckNames","chapterNames","setChapterNames","updateDeckNames","getDeckNames","AddEditCardArea","chptNamesState","_c4","_s3","currentChapter","setCurrentChapter","chapterOptions","setChapterOptions","cardOptions","setCardOptions","cardQuestion","setCardQuestion","cardAnswer","setCardAnswer","toggleButton","toggle","onChapterSelect","selectedChpt","updateChapterOptions","chapterOpts","updateCardOptions","cardOpts","getCards","card","updateDisplayCard","selectedCard","targetCard","getCard","question","answer","class","rows","cols","_c5","AddEdit","_c6","$RefreshReg$"],"sources":["C:/Users/clsno/OneDrive/Desktop/Learn React/Flashcards/src/components/AddEditPage.js"],"sourcesContent":["// Test\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction PageTitle() {\r\n    return (\r\n        <h2>Add/Edit</h2>\r\n    );\r\n}\r\n\r\nfunction NewDeckArea({ onDeckAdd, addDeck }) {\r\n    function handleDeckAdd() {\r\n        // Get the new deck name\r\n        const deckName = document.getElementById('new-deck-name');\r\n        // Add the new deck to the db\r\n        addDeck(deckName.value);\r\n        // Reset text input\r\n        deckName.value = \"\";\r\n        // Update deck names\r\n        onDeckAdd();\r\n    }\r\n    return (\r\n        <>\r\n            <div className='title-button-layout'>\r\n                <h3>Deck</h3>\r\n                <input \r\n                    onClick={handleDeckAdd}\r\n                    type='button'\r\n                    className='button-style-2'\r\n                    value={\"Add Deck\"}></input>\r\n            </div>\r\n            <label htmlFor='new-deck-name'>New Deck Name:</label><br />\r\n            <input autoComplete='off' id='new-deck-name' type='text'></input><br />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction NewChapterArea({ db, deckNames, updateChptState }) {\r\n    const [currentDeck, setCurrentDeck] = useState(\"Deck 0\");\r\n    const [deckOptions, setDeckOptions] = useState([]);\r\n\r\n    function updateDeckOptions() {\r\n        // Create a new set of deck options\r\n        const deckOpts = deckNames.map((name, index) => (\r\n            <option key={index}>{name}</option>\r\n        ));\r\n\r\n        // Update deckOptions state\r\n        setDeckOptions(deckOpts);\r\n    }\r\n\r\n    function onDeckSelect(e) {\r\n        // Update state based off select list\r\n        const selectedDeck = e.target.options[e.target.selectedIndex].value;\r\n        setCurrentDeck(selectedDeck);\r\n    }\r\n\r\n    function addNewChapter() {\r\n        // Add the new chapter from the input element to the database\r\n        const newChapterName = document.getElementById('new-chapter-name');\r\n        // Add the new chapter to the database\r\n        db.addChapter(currentDeck, newChapterName.value);\r\n        // Reset input text\r\n        newChapterName.value = \"\";\r\n        // Update chapter names state \r\n        updateChptState(db.getChapterNames(currentDeck));\r\n    }\r\n\r\n    // When deckNames changes, update the deck select options\r\n    useEffect(() => {\r\n        updateDeckOptions();\r\n    }, [deckNames]);\r\n    \r\n    return (\r\n        <div id='new-area'>\r\n            <div className='title-button-layout more-margin'>\r\n                <h3>Chapter</h3>\r\n                <input\r\n                    onClick={addNewChapter}\r\n                    type='button'\r\n                    className='button-style-2'\r\n                    value={\"Add Chapter\"}></input>\r\n            </div>\r\n            <label htmlFor='deck-select'>Select Deck</label>\r\n            <select\r\n                onChange={(e) => onDeckSelect(e)}\r\n                id='deck-select-new-chapt' \r\n                name='deck-select'\r\n            >\r\n                {deckOptions}\r\n            </select><br />\r\n            <label htmlFor='new-chapter-name' id='new-chapt-name'>New Chapter Name:</label><br />\r\n            <input autoComplete='off' id='new-chapter-name' type='text'></input><br />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Content({ db }) {\r\n    const [deckNames, setDeckNames] = useState([]);\r\n    const [chapterNames, setChapterNames] = useState([]);\r\n\r\n    function addDeck(deckName) {\r\n        db.addDeck(deckName);\r\n    }\r\n\r\n    function updateDeckNames() {\r\n        // pull from database to update deckNames state\r\n        setDeckNames(db.getDeckNames());\r\n    }\r\n\r\n    // Load deck names on initial load\r\n    useEffect(() => {\r\n        updateDeckNames();\r\n    }, []);\r\n\r\n    return (\r\n      <div id='container'>\r\n        <div id='new-chapt-deck'>\r\n            <NewDeckArea onDeckAdd={updateDeckNames} addDeck={addDeck} />\r\n            <NewChapterArea db={db} deckNames={deckNames} updateChptState={setChapterNames} />\r\n        </div>\r\n        <AddEditCardArea db={db} deckNames={deckNames} chptNamesState={chapterNames} />\r\n      </div>  \r\n    );\r\n}\r\n\r\nfunction AddEditCardArea({ db, deckNames, chptNamesState }) {\r\n    // Deck/Chapter states\r\n    const [currentDeck, setCurrentDeck] = useState(\"Deck 0\");\r\n    const [currentChapter, setCurrentChapter] = useState(\"Chapter 1\");    \r\n    // Select list option states\r\n    const [deckOptions, setDeckOptions] = useState([]);\r\n    const [chapterOptions, setChapterOptions] = useState([]);\r\n    const [cardOptions, setCardOptions] = useState([]);\r\n    // Card display states\r\n    const [cardQuestion, setCardQuestion] = useState(\"\");\r\n    const [cardAnswer, setCardAnswer] = useState(\"\");\r\n    // UI states (eg toggle button)\r\n    const [toggleButton, toggle] = useState(false);\r\n\r\n    // Helper functions\r\n    function updateDeckOptions() {\r\n        // Create a new set of deck options\r\n        const deckOpts = deckNames.map((name, index) => (\r\n            <option key={index}>{name}</option>\r\n        ));\r\n\r\n        // Update deckOptions state\r\n        setDeckOptions(deckOpts);\r\n    }\r\n\r\n    function onDeckSelect(e) {\r\n        // Update state based off select list\r\n        const selectedDeck = e.target.options[e.target.selectedIndex].value;\r\n        setCurrentDeck(selectedDeck);\r\n    }\r\n\r\n    function onChapterSelect(e) {\r\n        // Update state based off select list\r\n        const selectedChpt = e.target.options[e.target.selectedIndex].value;\r\n        setCurrentChapter(selectedChpt);\r\n    }\r\n\r\n    function updateChapterOptions() {\r\n        // Create a new set of chapter options\r\n        const chapterOpts = db.getChapterNames(currentDeck).map((name, index) => (\r\n            <option key={index}>{name}</option>\r\n        ));\r\n\r\n        // Update chapterOptions state\r\n        setChapterOptions(chapterOpts);\r\n    }\r\n\r\n    function updateCardOptions() {\r\n        // Create a new set of card options\r\n        const cardOpts = db.getCards(currentDeck, currentChapter).map((card, index) => (\r\n            <option key={index} value={card.id}>Card {card.id + 1}</option>\r\n        ));\r\n        \r\n        // Update cardOptions state\r\n        setCardOptions(cardOpts);\r\n    }\r\n\r\n    function updateDisplayCard(e=false) {\r\n        // we could make this function really cool, lots of repeated code\r\n        if (e) {\r\n            // Update state based off card select list\r\n            const selectedCard = e.target.options[e.target.selectedIndex].value;\r\n            const targetCard = db.getCard(currentDeck, currentChapter, selectedCard);\r\n            setCardQuestion(targetCard.question);\r\n            setCardAnswer(targetCard.answer);\r\n        } else {\r\n            // Update state based off deck and chapter select list\r\n            const targetCard = db.getCard(currentDeck, currentChapter, 0);  // default Card 0\r\n            if (targetCard) {\r\n                // If the card exists, load data\r\n                setCardQuestion(targetCard.question);\r\n                setCardAnswer(targetCard.answer);\r\n            } else {\r\n                setCardQuestion(\"\");\r\n                setCardAnswer(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // useEffect section\r\n    useEffect(() => {\r\n        // When deckNames changes, update the deck select options\r\n        updateDeckOptions();\r\n    }, [deckNames]);\r\n\r\n    useEffect(() => {\r\n        updateChapterOptions();\r\n    }, [currentDeck, chptNamesState]);\r\n\r\n    useEffect(() => {\r\n        updateCardOptions();\r\n    }, [currentDeck, currentChapter]);\r\n\r\n    useEffect(() => {\r\n        updateDisplayCard();\r\n    }, [currentDeck, currentChapter]);\r\n\r\n    useEffect(() => {\r\n        // On initial load, populate card text\r\n        const targetCard = db.getCard(currentDeck, currentChapter, 0);\r\n        setCardQuestion(targetCard.question);\r\n        setCardAnswer(targetCard.answer);\r\n    }, []);\r\n\r\n    return (\r\n        <div id='edit-add'>\r\n            <div className='title-button-layout'>\r\n                <h3>Cards</h3>\r\n                <label class=\"switch\">\r\n                    <input type=\"checkbox\"></input>\r\n                    <span class=\"slider round\"></span>\r\n                </label>\r\n                <input type='button' className='button-style-2' value={\"Add Card\"}></input><br />\r\n            </div>\r\n            <div className='select-layout'>\r\n                <label htmlFor='deck-select'>Select Deck</label>\r\n                <select\r\n                    onChange={(e) => onDeckSelect(e)}\r\n                    id='deck-select-edit-add'\r\n                    name='deck-select'\r\n                    className='select-style'\r\n                >\r\n                    {deckOptions}\r\n                </select><br />\r\n            </div>\r\n            <div className='select-layout'>\r\n                <label htmlFor='chapter-select'>Select Chapter</label>\r\n                <select\r\n                    onChange={(e) => onChapterSelect(e)}\r\n                    id='chapter-select'\r\n                    name='chapter-select' \r\n                    className='select-style'>\r\n                    {chapterOptions}\r\n                </select><br />\r\n            </div>\r\n            <div className='select-layout'>\r\n                <label htmlFor='card-select'>Select Card</label>\r\n                <select\r\n                    onChange={(e) => updateDisplayCard(e)}\r\n                    id='card-select'\r\n                    name='card-select'\r\n                    className='select-style'\r\n                >\r\n                    {cardOptions}\r\n                </select><br />\r\n            </div>\r\n            <label>Question:</label><br />\r\n            <input\r\n                value={cardQuestion}\r\n                onChange={(e) => {\r\n                    setCardQuestion(e.target.value);\r\n                }}\r\n                autoComplete='off'\r\n                type='text'\r\n                id='card-question-text'\r\n            ></input><br />\r\n            <label>Answer:</label><br />\r\n            <textarea\r\n                value={cardAnswer}\r\n                onChange={(e) => {\r\n                    setCardAnswer(e.target.value);\r\n                }}\r\n                id='card-answer-text'\r\n                name='answer'\r\n                rows='5'\r\n                cols='40'\r\n            ></textarea>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function AddEdit({ db }) {\r\n    return (\r\n      <>\r\n        <PageTitle />\r\n        <Content db={db}/>\r\n      </>\r\n    );  \r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}